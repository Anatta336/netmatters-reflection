@use "../icons";
@use "../theme";
@use "../utility";

// the icon's background is a circle so a single size value is used
// for both width and height.
$icon-background-size: utility.px-to-rem(60px);

#services {
    @include utility.hide-section-heading;

    box-sizing: border-box;
    padding: 2rem 1rem;
    
    a {
        @include utility.margin-x-center;
        @include utility.border;
        @include utility.rounded-corners;
        @include utility.primary-box-shadow;

        display: flex;
        flex-direction: column;

        padding: utility.px-to-rem(30px);
        margin-top: 0;
        margin-bottom: utility.px-to-rem(11px);
        
        background-color: theme.$primary-contrast;
        
        text-decoration: none;
        color: theme.$primary;
        text-align: center;
    }

    h3 {
        font-size: theme.$services-heading-size;
        font-weight: 400;
        margin: 0 0 utility.px-to-rem(11px);
    }

    p {
        font-size: theme.$services-para-size;
        line-height: 1.375rem;
        margin: 0 0 utility.px-to-rem(12px);
    }

    .call-to-action {
        // null $background-colour so the button mixin doesn't generate a
        // background-color property. It will be set on a per-card basis.
        @include utility.button(
            $background-colour: null,
            $text-colour: theme.$primary-contrast,
            $font-size: theme.$services-button-size,
            $width: 8rem,
            $height: 3rem,
        );
        // as this is a flex item in a vertical flex container, auto for top margin
        // will push it to the bottom of its container.
        margin: auto auto 0;
    }

    // generate a small horizontal line after the h3 element
    h3::after {
        @include utility.short-horizontal-line;
        margin-top: utility.px-to-rem(14px);
    }

    // set button's colour based on the class of the service card it's within
    // (assumes that all cards have a calss listed in $service-colours)
    @each $service-name, $colour in theme.$service-colours {
        .#{$service-name} .call-to-action {
            background-color: $colour;
        }
    }

    // generate icon appropriate to the id of the service card, placing
    // the icon as a ::before pseudo-element on the card's h3.
    @each $service-name, $icon-name in theme.$service-icons {
        $icon-unicode: icons.icon-unicode-from-name($icon-name);
        $icon-background-colour: theme.get-colour-for-service($service-name);

        .#{$service-name} h3::before {
            @include icons.icon($icon-unicode, 1.1em);
            @include utility.oval;
            @include utility.flex-center;

            color: theme.$primary-contrast;
            background-color: $icon-background-colour;

            width: $icon-background-size;
            height: $icon-background-size;

            margin: 0 auto utility.px-to-rem(17px);
        }
    }

    // on hover, almost every element in the card changes colour
    // some colour changes are regardless of the service
    a:hover {
        color: theme.$primary-contrast;

        h3::before,     // icon
        h3::after,      // horizontal line
        .call-to-action {
            background-color: theme.$primary-contrast;
        }
    }
    // some elements change colour depending on the service type
    @each $service, $colour in theme.$service-colours {
        a.#{$service}:hover {
            background-color: $colour;

            h3::before,  // icon
            .call-to-action {
                color: $colour;
            }
        }
    }

    // ---- breakpoints ----

    @include theme.content-width-by-breakpoint(
        $width-add: utility.px-to-rem(-30px)
    );
    
    // similar results could be achieved using the grid layout instead of flexbox,
    // however spacing between elements is important to this layout, and spacing
    // between grid tracks is not well supported in IE11.

    @include theme.above-breakpoint("small") {
        @include utility.margin-x-center;
        padding-left: 0;
        padding-right: 0;
        
        // at small breakpoint, first 3 cards remain filling page, but others fit 2 to a row
        .other-services {
            @include utility.flex-wrapped;

            // negative margin reverses effect of external margins from children
            margin: 0 -1rem;

            > * {
                margin: 1rem;
                flex-basis: 15rem;
                flex-grow: 1;
            }
        }
    }

    @include theme.above-breakpoint("medium") {
        // at medium breakpoint the first cards now also fit multiple in a row
        .top-services {
            @include utility.flex-wrapped;

            // negative margin reverses effect of external margins from children
            margin: 0 -1rem;

            > * {
                margin: 1rem;
                flex-basis: 12rem;
                flex-grow: 1;
            }
        }

        // other cards should fit 2 on a row
        .other-services > * {
            flex-basis: 15rem;
        }
    }

    @include theme.above-breakpoint("large") {
        // other-services should form row of 4 at this breakpoint,
        // so reduce their flex-basis to allow them to fit.
        .other-services > * {
            flex-basis: 12rem;
        }
    }
}
